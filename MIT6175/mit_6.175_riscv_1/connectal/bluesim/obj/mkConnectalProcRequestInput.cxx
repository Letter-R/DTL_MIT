/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Thu Mar  7 15:36:37 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkConnectalProcRequestInput.h"


/* Constructor */
MOD_mkConnectalProcRequestInput::MOD_mkConnectalProcRequestInput(tSimStateHdl simHdl,
								 char const *name,
								 Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_hostToCpu_requestAdapter_fbnbuff(simHdl,
					  "hostToCpu_requestAdapter_fbnbuff",
					  this,
					  32u,
					  0u,
					  (tUInt8)0u),
    INST_hostToCpu_requestAdapter_fifo(simHdl,
				       "hostToCpu_requestAdapter_fifo",
				       this,
				       32u,
				       1u,
				       (tUInt8)1u,
				       0u),
    INST_softReset_requestAdapter_fbnbuff(simHdl,
					  "softReset_requestAdapter_fbnbuff",
					  this,
					  32u,
					  0u,
					  (tUInt8)0u),
    INST_softReset_requestAdapter_fifo(simHdl,
				       "softReset_requestAdapter_fifo",
				       this,
				       32u,
				       1u,
				       (tUInt8)1u,
				       0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_portalIfc_requests_1_enq = false;
  PORT_EN_portalIfc_requests_0_enq = false;
  PORT_EN_pipes_softReset_PipeOut_deq = false;
  PORT_EN_pipes_hostToCpu_PipeOut_deq = false;
  PORT_portalIfc_requests_1_enq_v = 0u;
  PORT_portalIfc_requests_0_enq_v = 0u;
  PORT_portalIfc_messageSize_size_methodNumber = 0u;
  PORT_portalIfc_intr_channel = 0u;
  PORT_portalIfc_intr_status = false;
  PORT_portalIfc_requests_1_notFull = false;
  PORT_portalIfc_requests_0_notFull = false;
  PORT_portalIfc_messageSize_size = 0u;
  PORT_RDY_portalIfc_messageSize_size = false;
  PORT_RDY_portalIfc_requests_0_enq = false;
  PORT_RDY_portalIfc_requests_0_notFull = false;
  PORT_RDY_portalIfc_requests_1_enq = false;
  PORT_RDY_portalIfc_requests_1_notFull = false;
  PORT_RDY_portalIfc_intr_status = false;
  PORT_RDY_portalIfc_intr_channel = false;
  PORT_pipes_softReset_PipeOut_notEmpty = false;
  PORT_pipes_softReset_PipeOut_first = 0u;
  PORT_pipes_hostToCpu_PipeOut_notEmpty = false;
  PORT_pipes_hostToCpu_PipeOut_first = 0u;
  PORT_RDY_pipes_hostToCpu_PipeOut_first = false;
  PORT_RDY_pipes_hostToCpu_PipeOut_deq = false;
  PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty = false;
  PORT_RDY_pipes_softReset_PipeOut_first = false;
  PORT_RDY_pipes_softReset_PipeOut_deq = false;
  PORT_RDY_pipes_softReset_PipeOut_notEmpty = false;
  symbol_count = 50u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkConnectalProcRequestInput::init_symbols_0()
{
  init_symbol(&symbols[0u],
	      "CAN_FIRE_pipes_hostToCpu_PipeOut_deq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq,
	      1u);
  init_symbol(&symbols[1u],
	      "CAN_FIRE_pipes_hostToCpu_PipeOut_first",
	      SYM_DEF,
	      &DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first,
	      1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty",
	      SYM_DEF,
	      &DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_pipes_softReset_PipeOut_deq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_pipes_softReset_PipeOut_deq,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_pipes_softReset_PipeOut_first",
	      SYM_DEF,
	      &DEF_CAN_FIRE_pipes_softReset_PipeOut_first,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_pipes_softReset_PipeOut_notEmpty",
	      SYM_DEF,
	      &DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_portalIfc_intr_channel",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_intr_channel,
	      1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_portalIfc_intr_status",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_intr_status,
	      1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_portalIfc_messageSize_size",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_messageSize_size,
	      1u);
  init_symbol(&symbols[9u],
	      "CAN_FIRE_portalIfc_requests_0_enq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_requests_0_enq,
	      1u);
  init_symbol(&symbols[10u],
	      "CAN_FIRE_portalIfc_requests_0_notFull",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_requests_0_notFull,
	      1u);
  init_symbol(&symbols[11u],
	      "CAN_FIRE_portalIfc_requests_1_enq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_requests_1_enq,
	      1u);
  init_symbol(&symbols[12u],
	      "CAN_FIRE_portalIfc_requests_1_notFull",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_requests_1_notFull,
	      1u);
  init_symbol(&symbols[13u],
	      "EN_pipes_hostToCpu_PipeOut_deq",
	      SYM_PORT,
	      &PORT_EN_pipes_hostToCpu_PipeOut_deq,
	      1u);
  init_symbol(&symbols[14u],
	      "EN_pipes_softReset_PipeOut_deq",
	      SYM_PORT,
	      &PORT_EN_pipes_softReset_PipeOut_deq,
	      1u);
  init_symbol(&symbols[15u],
	      "EN_portalIfc_requests_0_enq",
	      SYM_PORT,
	      &PORT_EN_portalIfc_requests_0_enq,
	      1u);
  init_symbol(&symbols[16u],
	      "EN_portalIfc_requests_1_enq",
	      SYM_PORT,
	      &PORT_EN_portalIfc_requests_1_enq,
	      1u);
  init_symbol(&symbols[17u],
	      "hostToCpu_requestAdapter_fbnbuff",
	      SYM_MODULE,
	      &INST_hostToCpu_requestAdapter_fbnbuff);
  init_symbol(&symbols[18u],
	      "hostToCpu_requestAdapter_fifo",
	      SYM_MODULE,
	      &INST_hostToCpu_requestAdapter_fifo);
  init_symbol(&symbols[19u],
	      "pipes_hostToCpu_PipeOut_first",
	      SYM_PORT,
	      &PORT_pipes_hostToCpu_PipeOut_first,
	      32u);
  init_symbol(&symbols[20u],
	      "pipes_hostToCpu_PipeOut_notEmpty",
	      SYM_PORT,
	      &PORT_pipes_hostToCpu_PipeOut_notEmpty,
	      1u);
  init_symbol(&symbols[21u],
	      "pipes_softReset_PipeOut_first",
	      SYM_PORT,
	      &PORT_pipes_softReset_PipeOut_first,
	      32u);
  init_symbol(&symbols[22u],
	      "pipes_softReset_PipeOut_notEmpty",
	      SYM_PORT,
	      &PORT_pipes_softReset_PipeOut_notEmpty,
	      1u);
  init_symbol(&symbols[23u], "portalIfc_intr_channel", SYM_PORT, &PORT_portalIfc_intr_channel, 32u);
  init_symbol(&symbols[24u], "portalIfc_intr_status", SYM_PORT, &PORT_portalIfc_intr_status, 1u);
  init_symbol(&symbols[25u],
	      "portalIfc_messageSize_size",
	      SYM_PORT,
	      &PORT_portalIfc_messageSize_size,
	      16u);
  init_symbol(&symbols[26u],
	      "portalIfc_messageSize_size_methodNumber",
	      SYM_PORT,
	      &PORT_portalIfc_messageSize_size_methodNumber,
	      16u);
  init_symbol(&symbols[27u],
	      "portalIfc_requests_0_enq_v",
	      SYM_PORT,
	      &PORT_portalIfc_requests_0_enq_v,
	      32u);
  init_symbol(&symbols[28u],
	      "portalIfc_requests_0_notFull",
	      SYM_PORT,
	      &PORT_portalIfc_requests_0_notFull,
	      1u);
  init_symbol(&symbols[29u],
	      "portalIfc_requests_1_enq_v",
	      SYM_PORT,
	      &PORT_portalIfc_requests_1_enq_v,
	      32u);
  init_symbol(&symbols[30u],
	      "portalIfc_requests_1_notFull",
	      SYM_PORT,
	      &PORT_portalIfc_requests_1_notFull,
	      1u);
  init_symbol(&symbols[31u],
	      "RDY_pipes_hostToCpu_PipeOut_deq",
	      SYM_PORT,
	      &PORT_RDY_pipes_hostToCpu_PipeOut_deq,
	      1u);
  init_symbol(&symbols[32u],
	      "RDY_pipes_hostToCpu_PipeOut_first",
	      SYM_PORT,
	      &PORT_RDY_pipes_hostToCpu_PipeOut_first,
	      1u);
  init_symbol(&symbols[33u],
	      "RDY_pipes_hostToCpu_PipeOut_notEmpty",
	      SYM_PORT,
	      &PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty,
	      1u);
  init_symbol(&symbols[34u],
	      "RDY_pipes_softReset_PipeOut_deq",
	      SYM_PORT,
	      &PORT_RDY_pipes_softReset_PipeOut_deq,
	      1u);
  init_symbol(&symbols[35u],
	      "RDY_pipes_softReset_PipeOut_first",
	      SYM_PORT,
	      &PORT_RDY_pipes_softReset_PipeOut_first,
	      1u);
  init_symbol(&symbols[36u],
	      "RDY_pipes_softReset_PipeOut_notEmpty",
	      SYM_PORT,
	      &PORT_RDY_pipes_softReset_PipeOut_notEmpty,
	      1u);
  init_symbol(&symbols[37u],
	      "RDY_portalIfc_intr_channel",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_intr_channel,
	      1u);
  init_symbol(&symbols[38u],
	      "RDY_portalIfc_intr_status",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_intr_status,
	      1u);
  init_symbol(&symbols[39u],
	      "RDY_portalIfc_messageSize_size",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_messageSize_size,
	      1u);
  init_symbol(&symbols[40u],
	      "RDY_portalIfc_requests_0_enq",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_requests_0_enq,
	      1u);
  init_symbol(&symbols[41u],
	      "RDY_portalIfc_requests_0_notFull",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_requests_0_notFull,
	      1u);
  init_symbol(&symbols[42u],
	      "RDY_portalIfc_requests_1_enq",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_requests_1_enq,
	      1u);
  init_symbol(&symbols[43u],
	      "RDY_portalIfc_requests_1_notFull",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_requests_1_notFull,
	      1u);
  init_symbol(&symbols[44u],
	      "softReset_requestAdapter_fbnbuff",
	      SYM_MODULE,
	      &INST_softReset_requestAdapter_fbnbuff);
  init_symbol(&symbols[45u],
	      "softReset_requestAdapter_fifo",
	      SYM_MODULE,
	      &INST_softReset_requestAdapter_fifo);
  init_symbol(&symbols[46u],
	      "WILL_FIRE_pipes_hostToCpu_PipeOut_deq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq,
	      1u);
  init_symbol(&symbols[47u],
	      "WILL_FIRE_pipes_softReset_PipeOut_deq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_pipes_softReset_PipeOut_deq,
	      1u);
  init_symbol(&symbols[48u],
	      "WILL_FIRE_portalIfc_requests_0_enq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_portalIfc_requests_0_enq,
	      1u);
  init_symbol(&symbols[49u],
	      "WILL_FIRE_portalIfc_requests_1_enq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_portalIfc_requests_1_enq,
	      1u);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkConnectalProcRequestInput::METH_portalIfc_messageSize_size(tUInt32 ARG_portalIfc_messageSize_size_methodNumber)
{
  PORT_portalIfc_messageSize_size_methodNumber = ARG_portalIfc_messageSize_size_methodNumber;
  PORT_portalIfc_messageSize_size = 32u;
  return PORT_portalIfc_messageSize_size;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_portalIfc_messageSize_size()
{
  DEF_CAN_FIRE_portalIfc_messageSize_size = (tUInt8)1u;
  PORT_RDY_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
  return PORT_RDY_portalIfc_messageSize_size;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_portalIfc_intr_status()
{
  PORT_portalIfc_intr_status = (tUInt8)0u;
  return PORT_portalIfc_intr_status;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_portalIfc_intr_status()
{
  DEF_CAN_FIRE_portalIfc_intr_status = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
  return PORT_RDY_portalIfc_intr_status;
}

tUInt32 MOD_mkConnectalProcRequestInput::METH_portalIfc_intr_channel()
{
  PORT_portalIfc_intr_channel = 4294967295u;
  return PORT_portalIfc_intr_channel;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_portalIfc_intr_channel()
{
  DEF_CAN_FIRE_portalIfc_intr_channel = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
  return PORT_RDY_portalIfc_intr_channel;
}

void MOD_mkConnectalProcRequestInput::METH_portalIfc_requests_0_enq(tUInt32 ARG_portalIfc_requests_0_enq_v)
{
  PORT_EN_portalIfc_requests_0_enq = (tUInt8)1u;
  DEF_WILL_FIRE_portalIfc_requests_0_enq = (tUInt8)1u;
  PORT_portalIfc_requests_0_enq_v = ARG_portalIfc_requests_0_enq_v;
  INST_hostToCpu_requestAdapter_fbnbuff.METH_write(ARG_portalIfc_requests_0_enq_v);
  INST_hostToCpu_requestAdapter_fifo.METH_enq(ARG_portalIfc_requests_0_enq_v);
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_portalIfc_requests_0_enq()
{
  DEF_hostToCpu_requestAdapter_fifo_notFull____d4 = INST_hostToCpu_requestAdapter_fifo.METH_notFull();
  DEF_CAN_FIRE_portalIfc_requests_0_enq = DEF_hostToCpu_requestAdapter_fifo_notFull____d4 && INST_hostToCpu_requestAdapter_fifo.METH_i_notFull();
  PORT_RDY_portalIfc_requests_0_enq = DEF_CAN_FIRE_portalIfc_requests_0_enq;
  return PORT_RDY_portalIfc_requests_0_enq;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_portalIfc_requests_0_notFull()
{
  DEF_hostToCpu_requestAdapter_fifo_notFull____d4 = INST_hostToCpu_requestAdapter_fifo.METH_notFull();
  PORT_portalIfc_requests_0_notFull = DEF_hostToCpu_requestAdapter_fifo_notFull____d4;
  return PORT_portalIfc_requests_0_notFull;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_portalIfc_requests_0_notFull()
{
  DEF_CAN_FIRE_portalIfc_requests_0_notFull = (tUInt8)1u;
  PORT_RDY_portalIfc_requests_0_notFull = DEF_CAN_FIRE_portalIfc_requests_0_notFull;
  return PORT_RDY_portalIfc_requests_0_notFull;
}

void MOD_mkConnectalProcRequestInput::METH_portalIfc_requests_1_enq(tUInt32 ARG_portalIfc_requests_1_enq_v)
{
  PORT_EN_portalIfc_requests_1_enq = (tUInt8)1u;
  DEF_WILL_FIRE_portalIfc_requests_1_enq = (tUInt8)1u;
  PORT_portalIfc_requests_1_enq_v = ARG_portalIfc_requests_1_enq_v;
  INST_softReset_requestAdapter_fbnbuff.METH_write(ARG_portalIfc_requests_1_enq_v);
  INST_softReset_requestAdapter_fifo.METH_enq(ARG_portalIfc_requests_1_enq_v);
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_portalIfc_requests_1_enq()
{
  DEF_softReset_requestAdapter_fifo_notFull____d6 = INST_softReset_requestAdapter_fifo.METH_notFull();
  DEF_CAN_FIRE_portalIfc_requests_1_enq = DEF_softReset_requestAdapter_fifo_notFull____d6 && INST_softReset_requestAdapter_fifo.METH_i_notFull();
  PORT_RDY_portalIfc_requests_1_enq = DEF_CAN_FIRE_portalIfc_requests_1_enq;
  return PORT_RDY_portalIfc_requests_1_enq;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_portalIfc_requests_1_notFull()
{
  DEF_softReset_requestAdapter_fifo_notFull____d6 = INST_softReset_requestAdapter_fifo.METH_notFull();
  PORT_portalIfc_requests_1_notFull = DEF_softReset_requestAdapter_fifo_notFull____d6;
  return PORT_portalIfc_requests_1_notFull;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_portalIfc_requests_1_notFull()
{
  DEF_CAN_FIRE_portalIfc_requests_1_notFull = (tUInt8)1u;
  PORT_RDY_portalIfc_requests_1_notFull = DEF_CAN_FIRE_portalIfc_requests_1_notFull;
  return PORT_RDY_portalIfc_requests_1_notFull;
}

tUInt32 MOD_mkConnectalProcRequestInput::METH_pipes_hostToCpu_PipeOut_first()
{
  PORT_pipes_hostToCpu_PipeOut_first = INST_hostToCpu_requestAdapter_fifo.METH_first();
  return PORT_pipes_hostToCpu_PipeOut_first;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_pipes_hostToCpu_PipeOut_first()
{
  DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8 = INST_hostToCpu_requestAdapter_fifo.METH_i_notEmpty();
  DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first = DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8;
  PORT_RDY_pipes_hostToCpu_PipeOut_first = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first;
  return PORT_RDY_pipes_hostToCpu_PipeOut_first;
}

void MOD_mkConnectalProcRequestInput::METH_pipes_hostToCpu_PipeOut_deq()
{
  PORT_EN_pipes_hostToCpu_PipeOut_deq = (tUInt8)1u;
  DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq = (tUInt8)1u;
  INST_hostToCpu_requestAdapter_fifo.METH_deq();
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_pipes_hostToCpu_PipeOut_deq()
{
  DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8 = INST_hostToCpu_requestAdapter_fifo.METH_i_notEmpty();
  DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq = DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8;
  PORT_RDY_pipes_hostToCpu_PipeOut_deq = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq;
  return PORT_RDY_pipes_hostToCpu_PipeOut_deq;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_pipes_hostToCpu_PipeOut_notEmpty()
{
  PORT_pipes_hostToCpu_PipeOut_notEmpty = INST_hostToCpu_requestAdapter_fifo.METH_notEmpty();
  return PORT_pipes_hostToCpu_PipeOut_notEmpty;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_pipes_hostToCpu_PipeOut_notEmpty()
{
  DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty = (tUInt8)1u;
  PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty;
  return PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty;
}

tUInt32 MOD_mkConnectalProcRequestInput::METH_pipes_softReset_PipeOut_first()
{
  PORT_pipes_softReset_PipeOut_first = INST_softReset_requestAdapter_fifo.METH_first();
  return PORT_pipes_softReset_PipeOut_first;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_pipes_softReset_PipeOut_first()
{
  DEF_softReset_requestAdapter_fifo_i_notEmpty____d9 = INST_softReset_requestAdapter_fifo.METH_i_notEmpty();
  DEF_CAN_FIRE_pipes_softReset_PipeOut_first = DEF_softReset_requestAdapter_fifo_i_notEmpty____d9;
  PORT_RDY_pipes_softReset_PipeOut_first = DEF_CAN_FIRE_pipes_softReset_PipeOut_first;
  return PORT_RDY_pipes_softReset_PipeOut_first;
}

void MOD_mkConnectalProcRequestInput::METH_pipes_softReset_PipeOut_deq()
{
  PORT_EN_pipes_softReset_PipeOut_deq = (tUInt8)1u;
  DEF_WILL_FIRE_pipes_softReset_PipeOut_deq = (tUInt8)1u;
  INST_softReset_requestAdapter_fifo.METH_deq();
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_pipes_softReset_PipeOut_deq()
{
  DEF_softReset_requestAdapter_fifo_i_notEmpty____d9 = INST_softReset_requestAdapter_fifo.METH_i_notEmpty();
  DEF_CAN_FIRE_pipes_softReset_PipeOut_deq = DEF_softReset_requestAdapter_fifo_i_notEmpty____d9;
  PORT_RDY_pipes_softReset_PipeOut_deq = DEF_CAN_FIRE_pipes_softReset_PipeOut_deq;
  return PORT_RDY_pipes_softReset_PipeOut_deq;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_pipes_softReset_PipeOut_notEmpty()
{
  PORT_pipes_softReset_PipeOut_notEmpty = INST_softReset_requestAdapter_fifo.METH_notEmpty();
  return PORT_pipes_softReset_PipeOut_notEmpty;
}

tUInt8 MOD_mkConnectalProcRequestInput::METH_RDY_pipes_softReset_PipeOut_notEmpty()
{
  DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty = (tUInt8)1u;
  PORT_RDY_pipes_softReset_PipeOut_notEmpty = DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty;
  return PORT_RDY_pipes_softReset_PipeOut_notEmpty;
}


/* Reset routines */

void MOD_mkConnectalProcRequestInput::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_softReset_requestAdapter_fifo.reset_RST(ARG_rst_in);
  INST_softReset_requestAdapter_fbnbuff.reset_RST(ARG_rst_in);
  INST_hostToCpu_requestAdapter_fifo.reset_RST(ARG_rst_in);
  INST_hostToCpu_requestAdapter_fbnbuff.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkConnectalProcRequestInput::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkConnectalProcRequestInput::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_hostToCpu_requestAdapter_fbnbuff.dump_state(indent + 2u);
  INST_hostToCpu_requestAdapter_fifo.dump_state(indent + 2u);
  INST_softReset_requestAdapter_fbnbuff.dump_state(indent + 2u);
  INST_softReset_requestAdapter_fifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkConnectalProcRequestInput::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 55u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_pipes_hostToCpu_PipeOut_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_pipes_hostToCpu_PipeOut_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_pipes_softReset_PipeOut_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_pipes_softReset_PipeOut_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_pipes_softReset_PipeOut_notEmpty", 1u);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_intr_channel", 1u);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_messageSize_size", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_requests_0_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_requests_0_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_requests_1_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_requests_1_notFull", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_pipes_hostToCpu_PipeOut_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_pipes_softReset_PipeOut_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_portalIfc_requests_0_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_portalIfc_requests_1_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "hostToCpu_requestAdapter_fifo_i_notEmpty____d8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "hostToCpu_requestAdapter_fifo_notFull____d4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "softReset_requestAdapter_fifo_i_notEmpty____d9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "softReset_requestAdapter_fifo_notFull____d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_pipes_hostToCpu_PipeOut_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_pipes_softReset_PipeOut_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_portalIfc_requests_0_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_portalIfc_requests_1_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_pipes_hostToCpu_PipeOut_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_pipes_hostToCpu_PipeOut_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_pipes_hostToCpu_PipeOut_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_pipes_softReset_PipeOut_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_pipes_softReset_PipeOut_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_pipes_softReset_PipeOut_notEmpty", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_intr_channel", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_messageSize_size", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_requests_0_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_requests_0_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_requests_1_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_requests_1_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pipes_hostToCpu_PipeOut_first", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pipes_hostToCpu_PipeOut_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pipes_softReset_PipeOut_first", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pipes_softReset_PipeOut_notEmpty", 1u);
  vcd_write_def(sim_hdl, num++, "portalIfc_intr_channel", 32u);
  vcd_write_def(sim_hdl, num++, "portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "portalIfc_messageSize_size", 16u);
  vcd_write_def(sim_hdl, num++, "portalIfc_messageSize_size_methodNumber", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_requests_0_enq_v", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_requests_0_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_requests_1_enq_v", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_requests_1_notFull", 1u);
  num = INST_hostToCpu_requestAdapter_fbnbuff.dump_VCD_defs(num);
  num = INST_hostToCpu_requestAdapter_fifo.dump_VCD_defs(num);
  num = INST_softReset_requestAdapter_fbnbuff.dump_VCD_defs(num);
  num = INST_softReset_requestAdapter_fifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkConnectalProcRequestInput::dump_VCD(tVCDDumpType dt,
					       unsigned int levels,
					       MOD_mkConnectalProcRequestInput &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkConnectalProcRequestInput::vcd_defs(tVCDDumpType dt,
					       MOD_mkConnectalProcRequestInput &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq) != DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq, 1u);
	backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first) != DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first, 1u);
	backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty) != DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty, 1u);
	backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_deq) != DEF_CAN_FIRE_pipes_softReset_PipeOut_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_pipes_softReset_PipeOut_deq, 1u);
	backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_deq = DEF_CAN_FIRE_pipes_softReset_PipeOut_deq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_first) != DEF_CAN_FIRE_pipes_softReset_PipeOut_first)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_pipes_softReset_PipeOut_first, 1u);
	backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_first = DEF_CAN_FIRE_pipes_softReset_PipeOut_first;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty) != DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty, 1u);
	backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty = DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_intr_channel) != DEF_CAN_FIRE_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_intr_channel, 1u);
	backing.DEF_CAN_FIRE_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_intr_status) != DEF_CAN_FIRE_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_intr_status, 1u);
	backing.DEF_CAN_FIRE_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_messageSize_size) != DEF_CAN_FIRE_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_messageSize_size, 1u);
	backing.DEF_CAN_FIRE_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_requests_0_enq) != DEF_CAN_FIRE_portalIfc_requests_0_enq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_requests_0_enq, 1u);
	backing.DEF_CAN_FIRE_portalIfc_requests_0_enq = DEF_CAN_FIRE_portalIfc_requests_0_enq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_requests_0_notFull) != DEF_CAN_FIRE_portalIfc_requests_0_notFull)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_requests_0_notFull, 1u);
	backing.DEF_CAN_FIRE_portalIfc_requests_0_notFull = DEF_CAN_FIRE_portalIfc_requests_0_notFull;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_requests_1_enq) != DEF_CAN_FIRE_portalIfc_requests_1_enq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_requests_1_enq, 1u);
	backing.DEF_CAN_FIRE_portalIfc_requests_1_enq = DEF_CAN_FIRE_portalIfc_requests_1_enq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_requests_1_notFull) != DEF_CAN_FIRE_portalIfc_requests_1_notFull)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_requests_1_notFull, 1u);
	backing.DEF_CAN_FIRE_portalIfc_requests_1_notFull = DEF_CAN_FIRE_portalIfc_requests_1_notFull;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq) != DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq, 1u);
	backing.DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq = DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_pipes_softReset_PipeOut_deq) != DEF_WILL_FIRE_pipes_softReset_PipeOut_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_pipes_softReset_PipeOut_deq, 1u);
	backing.DEF_WILL_FIRE_pipes_softReset_PipeOut_deq = DEF_WILL_FIRE_pipes_softReset_PipeOut_deq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_portalIfc_requests_0_enq) != DEF_WILL_FIRE_portalIfc_requests_0_enq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_portalIfc_requests_0_enq, 1u);
	backing.DEF_WILL_FIRE_portalIfc_requests_0_enq = DEF_WILL_FIRE_portalIfc_requests_0_enq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_portalIfc_requests_1_enq) != DEF_WILL_FIRE_portalIfc_requests_1_enq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_portalIfc_requests_1_enq, 1u);
	backing.DEF_WILL_FIRE_portalIfc_requests_1_enq = DEF_WILL_FIRE_portalIfc_requests_1_enq;
      }
      ++num;
      if ((backing.DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8) != DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8)
      {
	vcd_write_val(sim_hdl, num, DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8, 1u);
	backing.DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8 = DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8;
      }
      ++num;
      if ((backing.DEF_hostToCpu_requestAdapter_fifo_notFull____d4) != DEF_hostToCpu_requestAdapter_fifo_notFull____d4)
      {
	vcd_write_val(sim_hdl, num, DEF_hostToCpu_requestAdapter_fifo_notFull____d4, 1u);
	backing.DEF_hostToCpu_requestAdapter_fifo_notFull____d4 = DEF_hostToCpu_requestAdapter_fifo_notFull____d4;
      }
      ++num;
      if ((backing.DEF_softReset_requestAdapter_fifo_i_notEmpty____d9) != DEF_softReset_requestAdapter_fifo_i_notEmpty____d9)
      {
	vcd_write_val(sim_hdl, num, DEF_softReset_requestAdapter_fifo_i_notEmpty____d9, 1u);
	backing.DEF_softReset_requestAdapter_fifo_i_notEmpty____d9 = DEF_softReset_requestAdapter_fifo_i_notEmpty____d9;
      }
      ++num;
      if ((backing.DEF_softReset_requestAdapter_fifo_notFull____d6) != DEF_softReset_requestAdapter_fifo_notFull____d6)
      {
	vcd_write_val(sim_hdl, num, DEF_softReset_requestAdapter_fifo_notFull____d6, 1u);
	backing.DEF_softReset_requestAdapter_fifo_notFull____d6 = DEF_softReset_requestAdapter_fifo_notFull____d6;
      }
      ++num;
      if ((backing.PORT_EN_pipes_hostToCpu_PipeOut_deq) != PORT_EN_pipes_hostToCpu_PipeOut_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_pipes_hostToCpu_PipeOut_deq, 1u);
	backing.PORT_EN_pipes_hostToCpu_PipeOut_deq = PORT_EN_pipes_hostToCpu_PipeOut_deq;
      }
      ++num;
      if ((backing.PORT_EN_pipes_softReset_PipeOut_deq) != PORT_EN_pipes_softReset_PipeOut_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_pipes_softReset_PipeOut_deq, 1u);
	backing.PORT_EN_pipes_softReset_PipeOut_deq = PORT_EN_pipes_softReset_PipeOut_deq;
      }
      ++num;
      if ((backing.PORT_EN_portalIfc_requests_0_enq) != PORT_EN_portalIfc_requests_0_enq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_portalIfc_requests_0_enq, 1u);
	backing.PORT_EN_portalIfc_requests_0_enq = PORT_EN_portalIfc_requests_0_enq;
      }
      ++num;
      if ((backing.PORT_EN_portalIfc_requests_1_enq) != PORT_EN_portalIfc_requests_1_enq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_portalIfc_requests_1_enq, 1u);
	backing.PORT_EN_portalIfc_requests_1_enq = PORT_EN_portalIfc_requests_1_enq;
      }
      ++num;
      if ((backing.PORT_RDY_pipes_hostToCpu_PipeOut_deq) != PORT_RDY_pipes_hostToCpu_PipeOut_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_pipes_hostToCpu_PipeOut_deq, 1u);
	backing.PORT_RDY_pipes_hostToCpu_PipeOut_deq = PORT_RDY_pipes_hostToCpu_PipeOut_deq;
      }
      ++num;
      if ((backing.PORT_RDY_pipes_hostToCpu_PipeOut_first) != PORT_RDY_pipes_hostToCpu_PipeOut_first)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_pipes_hostToCpu_PipeOut_first, 1u);
	backing.PORT_RDY_pipes_hostToCpu_PipeOut_first = PORT_RDY_pipes_hostToCpu_PipeOut_first;
      }
      ++num;
      if ((backing.PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty) != PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty, 1u);
	backing.PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty = PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty;
      }
      ++num;
      if ((backing.PORT_RDY_pipes_softReset_PipeOut_deq) != PORT_RDY_pipes_softReset_PipeOut_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_pipes_softReset_PipeOut_deq, 1u);
	backing.PORT_RDY_pipes_softReset_PipeOut_deq = PORT_RDY_pipes_softReset_PipeOut_deq;
      }
      ++num;
      if ((backing.PORT_RDY_pipes_softReset_PipeOut_first) != PORT_RDY_pipes_softReset_PipeOut_first)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_pipes_softReset_PipeOut_first, 1u);
	backing.PORT_RDY_pipes_softReset_PipeOut_first = PORT_RDY_pipes_softReset_PipeOut_first;
      }
      ++num;
      if ((backing.PORT_RDY_pipes_softReset_PipeOut_notEmpty) != PORT_RDY_pipes_softReset_PipeOut_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_pipes_softReset_PipeOut_notEmpty, 1u);
	backing.PORT_RDY_pipes_softReset_PipeOut_notEmpty = PORT_RDY_pipes_softReset_PipeOut_notEmpty;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_intr_channel) != PORT_RDY_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_intr_channel, 1u);
	backing.PORT_RDY_portalIfc_intr_channel = PORT_RDY_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_intr_status) != PORT_RDY_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_intr_status, 1u);
	backing.PORT_RDY_portalIfc_intr_status = PORT_RDY_portalIfc_intr_status;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_messageSize_size) != PORT_RDY_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_messageSize_size, 1u);
	backing.PORT_RDY_portalIfc_messageSize_size = PORT_RDY_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_requests_0_enq) != PORT_RDY_portalIfc_requests_0_enq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_requests_0_enq, 1u);
	backing.PORT_RDY_portalIfc_requests_0_enq = PORT_RDY_portalIfc_requests_0_enq;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_requests_0_notFull) != PORT_RDY_portalIfc_requests_0_notFull)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_requests_0_notFull, 1u);
	backing.PORT_RDY_portalIfc_requests_0_notFull = PORT_RDY_portalIfc_requests_0_notFull;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_requests_1_enq) != PORT_RDY_portalIfc_requests_1_enq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_requests_1_enq, 1u);
	backing.PORT_RDY_portalIfc_requests_1_enq = PORT_RDY_portalIfc_requests_1_enq;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_requests_1_notFull) != PORT_RDY_portalIfc_requests_1_notFull)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_requests_1_notFull, 1u);
	backing.PORT_RDY_portalIfc_requests_1_notFull = PORT_RDY_portalIfc_requests_1_notFull;
      }
      ++num;
      if ((backing.PORT_pipes_hostToCpu_PipeOut_first) != PORT_pipes_hostToCpu_PipeOut_first)
      {
	vcd_write_val(sim_hdl, num, PORT_pipes_hostToCpu_PipeOut_first, 32u);
	backing.PORT_pipes_hostToCpu_PipeOut_first = PORT_pipes_hostToCpu_PipeOut_first;
      }
      ++num;
      if ((backing.PORT_pipes_hostToCpu_PipeOut_notEmpty) != PORT_pipes_hostToCpu_PipeOut_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_pipes_hostToCpu_PipeOut_notEmpty, 1u);
	backing.PORT_pipes_hostToCpu_PipeOut_notEmpty = PORT_pipes_hostToCpu_PipeOut_notEmpty;
      }
      ++num;
      if ((backing.PORT_pipes_softReset_PipeOut_first) != PORT_pipes_softReset_PipeOut_first)
      {
	vcd_write_val(sim_hdl, num, PORT_pipes_softReset_PipeOut_first, 32u);
	backing.PORT_pipes_softReset_PipeOut_first = PORT_pipes_softReset_PipeOut_first;
      }
      ++num;
      if ((backing.PORT_pipes_softReset_PipeOut_notEmpty) != PORT_pipes_softReset_PipeOut_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_pipes_softReset_PipeOut_notEmpty, 1u);
	backing.PORT_pipes_softReset_PipeOut_notEmpty = PORT_pipes_softReset_PipeOut_notEmpty;
      }
      ++num;
      if ((backing.PORT_portalIfc_intr_channel) != PORT_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_intr_channel, 32u);
	backing.PORT_portalIfc_intr_channel = PORT_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.PORT_portalIfc_intr_status) != PORT_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_intr_status, 1u);
	backing.PORT_portalIfc_intr_status = PORT_portalIfc_intr_status;
      }
      ++num;
      if ((backing.PORT_portalIfc_messageSize_size) != PORT_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_messageSize_size, 16u);
	backing.PORT_portalIfc_messageSize_size = PORT_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.PORT_portalIfc_messageSize_size_methodNumber) != PORT_portalIfc_messageSize_size_methodNumber)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_messageSize_size_methodNumber, 16u);
	backing.PORT_portalIfc_messageSize_size_methodNumber = PORT_portalIfc_messageSize_size_methodNumber;
      }
      ++num;
      if ((backing.PORT_portalIfc_requests_0_enq_v) != PORT_portalIfc_requests_0_enq_v)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_requests_0_enq_v, 32u);
	backing.PORT_portalIfc_requests_0_enq_v = PORT_portalIfc_requests_0_enq_v;
      }
      ++num;
      if ((backing.PORT_portalIfc_requests_0_notFull) != PORT_portalIfc_requests_0_notFull)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_requests_0_notFull, 1u);
	backing.PORT_portalIfc_requests_0_notFull = PORT_portalIfc_requests_0_notFull;
      }
      ++num;
      if ((backing.PORT_portalIfc_requests_1_enq_v) != PORT_portalIfc_requests_1_enq_v)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_requests_1_enq_v, 32u);
	backing.PORT_portalIfc_requests_1_enq_v = PORT_portalIfc_requests_1_enq_v;
      }
      ++num;
      if ((backing.PORT_portalIfc_requests_1_notFull) != PORT_portalIfc_requests_1_notFull)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_requests_1_notFull, 1u);
	backing.PORT_portalIfc_requests_1_notFull = PORT_portalIfc_requests_1_notFull;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq, 1u);
      backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_deq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first, 1u);
      backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_first;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty, 1u);
      backing.DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty = DEF_CAN_FIRE_pipes_hostToCpu_PipeOut_notEmpty;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_pipes_softReset_PipeOut_deq, 1u);
      backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_deq = DEF_CAN_FIRE_pipes_softReset_PipeOut_deq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_pipes_softReset_PipeOut_first, 1u);
      backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_first = DEF_CAN_FIRE_pipes_softReset_PipeOut_first;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty, 1u);
      backing.DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty = DEF_CAN_FIRE_pipes_softReset_PipeOut_notEmpty;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_intr_channel, 1u);
      backing.DEF_CAN_FIRE_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_intr_status, 1u);
      backing.DEF_CAN_FIRE_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_messageSize_size, 1u);
      backing.DEF_CAN_FIRE_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_requests_0_enq, 1u);
      backing.DEF_CAN_FIRE_portalIfc_requests_0_enq = DEF_CAN_FIRE_portalIfc_requests_0_enq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_requests_0_notFull, 1u);
      backing.DEF_CAN_FIRE_portalIfc_requests_0_notFull = DEF_CAN_FIRE_portalIfc_requests_0_notFull;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_requests_1_enq, 1u);
      backing.DEF_CAN_FIRE_portalIfc_requests_1_enq = DEF_CAN_FIRE_portalIfc_requests_1_enq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_requests_1_notFull, 1u);
      backing.DEF_CAN_FIRE_portalIfc_requests_1_notFull = DEF_CAN_FIRE_portalIfc_requests_1_notFull;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq, 1u);
      backing.DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq = DEF_WILL_FIRE_pipes_hostToCpu_PipeOut_deq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_pipes_softReset_PipeOut_deq, 1u);
      backing.DEF_WILL_FIRE_pipes_softReset_PipeOut_deq = DEF_WILL_FIRE_pipes_softReset_PipeOut_deq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_portalIfc_requests_0_enq, 1u);
      backing.DEF_WILL_FIRE_portalIfc_requests_0_enq = DEF_WILL_FIRE_portalIfc_requests_0_enq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_portalIfc_requests_1_enq, 1u);
      backing.DEF_WILL_FIRE_portalIfc_requests_1_enq = DEF_WILL_FIRE_portalIfc_requests_1_enq;
      vcd_write_val(sim_hdl, num++, DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8, 1u);
      backing.DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8 = DEF_hostToCpu_requestAdapter_fifo_i_notEmpty____d8;
      vcd_write_val(sim_hdl, num++, DEF_hostToCpu_requestAdapter_fifo_notFull____d4, 1u);
      backing.DEF_hostToCpu_requestAdapter_fifo_notFull____d4 = DEF_hostToCpu_requestAdapter_fifo_notFull____d4;
      vcd_write_val(sim_hdl, num++, DEF_softReset_requestAdapter_fifo_i_notEmpty____d9, 1u);
      backing.DEF_softReset_requestAdapter_fifo_i_notEmpty____d9 = DEF_softReset_requestAdapter_fifo_i_notEmpty____d9;
      vcd_write_val(sim_hdl, num++, DEF_softReset_requestAdapter_fifo_notFull____d6, 1u);
      backing.DEF_softReset_requestAdapter_fifo_notFull____d6 = DEF_softReset_requestAdapter_fifo_notFull____d6;
      vcd_write_val(sim_hdl, num++, PORT_EN_pipes_hostToCpu_PipeOut_deq, 1u);
      backing.PORT_EN_pipes_hostToCpu_PipeOut_deq = PORT_EN_pipes_hostToCpu_PipeOut_deq;
      vcd_write_val(sim_hdl, num++, PORT_EN_pipes_softReset_PipeOut_deq, 1u);
      backing.PORT_EN_pipes_softReset_PipeOut_deq = PORT_EN_pipes_softReset_PipeOut_deq;
      vcd_write_val(sim_hdl, num++, PORT_EN_portalIfc_requests_0_enq, 1u);
      backing.PORT_EN_portalIfc_requests_0_enq = PORT_EN_portalIfc_requests_0_enq;
      vcd_write_val(sim_hdl, num++, PORT_EN_portalIfc_requests_1_enq, 1u);
      backing.PORT_EN_portalIfc_requests_1_enq = PORT_EN_portalIfc_requests_1_enq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_pipes_hostToCpu_PipeOut_deq, 1u);
      backing.PORT_RDY_pipes_hostToCpu_PipeOut_deq = PORT_RDY_pipes_hostToCpu_PipeOut_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_pipes_hostToCpu_PipeOut_first, 1u);
      backing.PORT_RDY_pipes_hostToCpu_PipeOut_first = PORT_RDY_pipes_hostToCpu_PipeOut_first;
      vcd_write_val(sim_hdl, num++, PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty, 1u);
      backing.PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty = PORT_RDY_pipes_hostToCpu_PipeOut_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_RDY_pipes_softReset_PipeOut_deq, 1u);
      backing.PORT_RDY_pipes_softReset_PipeOut_deq = PORT_RDY_pipes_softReset_PipeOut_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_pipes_softReset_PipeOut_first, 1u);
      backing.PORT_RDY_pipes_softReset_PipeOut_first = PORT_RDY_pipes_softReset_PipeOut_first;
      vcd_write_val(sim_hdl, num++, PORT_RDY_pipes_softReset_PipeOut_notEmpty, 1u);
      backing.PORT_RDY_pipes_softReset_PipeOut_notEmpty = PORT_RDY_pipes_softReset_PipeOut_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_intr_channel, 1u);
      backing.PORT_RDY_portalIfc_intr_channel = PORT_RDY_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_intr_status, 1u);
      backing.PORT_RDY_portalIfc_intr_status = PORT_RDY_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_messageSize_size, 1u);
      backing.PORT_RDY_portalIfc_messageSize_size = PORT_RDY_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_requests_0_enq, 1u);
      backing.PORT_RDY_portalIfc_requests_0_enq = PORT_RDY_portalIfc_requests_0_enq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_requests_0_notFull, 1u);
      backing.PORT_RDY_portalIfc_requests_0_notFull = PORT_RDY_portalIfc_requests_0_notFull;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_requests_1_enq, 1u);
      backing.PORT_RDY_portalIfc_requests_1_enq = PORT_RDY_portalIfc_requests_1_enq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_requests_1_notFull, 1u);
      backing.PORT_RDY_portalIfc_requests_1_notFull = PORT_RDY_portalIfc_requests_1_notFull;
      vcd_write_val(sim_hdl, num++, PORT_pipes_hostToCpu_PipeOut_first, 32u);
      backing.PORT_pipes_hostToCpu_PipeOut_first = PORT_pipes_hostToCpu_PipeOut_first;
      vcd_write_val(sim_hdl, num++, PORT_pipes_hostToCpu_PipeOut_notEmpty, 1u);
      backing.PORT_pipes_hostToCpu_PipeOut_notEmpty = PORT_pipes_hostToCpu_PipeOut_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_pipes_softReset_PipeOut_first, 32u);
      backing.PORT_pipes_softReset_PipeOut_first = PORT_pipes_softReset_PipeOut_first;
      vcd_write_val(sim_hdl, num++, PORT_pipes_softReset_PipeOut_notEmpty, 1u);
      backing.PORT_pipes_softReset_PipeOut_notEmpty = PORT_pipes_softReset_PipeOut_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_intr_channel, 32u);
      backing.PORT_portalIfc_intr_channel = PORT_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_intr_status, 1u);
      backing.PORT_portalIfc_intr_status = PORT_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_messageSize_size, 16u);
      backing.PORT_portalIfc_messageSize_size = PORT_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_messageSize_size_methodNumber, 16u);
      backing.PORT_portalIfc_messageSize_size_methodNumber = PORT_portalIfc_messageSize_size_methodNumber;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_requests_0_enq_v, 32u);
      backing.PORT_portalIfc_requests_0_enq_v = PORT_portalIfc_requests_0_enq_v;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_requests_0_notFull, 1u);
      backing.PORT_portalIfc_requests_0_notFull = PORT_portalIfc_requests_0_notFull;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_requests_1_enq_v, 32u);
      backing.PORT_portalIfc_requests_1_enq_v = PORT_portalIfc_requests_1_enq_v;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_requests_1_notFull, 1u);
      backing.PORT_portalIfc_requests_1_notFull = PORT_portalIfc_requests_1_notFull;
    }
}

void MOD_mkConnectalProcRequestInput::vcd_prims(tVCDDumpType dt,
						MOD_mkConnectalProcRequestInput &backing)
{
  INST_hostToCpu_requestAdapter_fbnbuff.dump_VCD(dt, backing.INST_hostToCpu_requestAdapter_fbnbuff);
  INST_hostToCpu_requestAdapter_fifo.dump_VCD(dt, backing.INST_hostToCpu_requestAdapter_fifo);
  INST_softReset_requestAdapter_fbnbuff.dump_VCD(dt, backing.INST_softReset_requestAdapter_fbnbuff);
  INST_softReset_requestAdapter_fifo.dump_VCD(dt, backing.INST_softReset_requestAdapter_fifo);
}
